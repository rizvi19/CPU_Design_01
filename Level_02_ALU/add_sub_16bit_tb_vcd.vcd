$date
	Fri Sep 27 20:37:59 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module add_sub_16bit_tb $end
$var wire 16 ! res [15:0] $end
$var wire 1 " cout $end
$var reg 16 # in0 [15:0] $end
$var reg 16 $ in1 [15:0] $end
$var reg 1 % sel $end
$scope module cir1 $end
$var wire 16 & in0 [15:0] $end
$var wire 16 ' in1 [15:0] $end
$var wire 1 % sel $end
$var wire 16 ( sum [15:0] $end
$var wire 1 ) notb9 $end
$var wire 1 * notb8 $end
$var wire 1 + notb7 $end
$var wire 1 , notb6 $end
$var wire 1 - notb5 $end
$var wire 1 . notb4 $end
$var wire 1 / notb3 $end
$var wire 1 0 notb2 $end
$var wire 1 1 notb15 $end
$var wire 1 2 notb14 $end
$var wire 1 3 notb13 $end
$var wire 1 4 notb12 $end
$var wire 1 5 notb11 $end
$var wire 1 6 notb10 $end
$var wire 1 7 notb1 $end
$var wire 1 8 notb0 $end
$var wire 1 9 cout9 $end
$var wire 1 : cout8 $end
$var wire 1 ; cout7 $end
$var wire 1 < cout6 $end
$var wire 1 = cout5 $end
$var wire 1 > cout4 $end
$var wire 1 ? cout3 $end
$var wire 1 @ cout2 $end
$var wire 1 A cout14 $end
$var wire 1 B cout13 $end
$var wire 1 C cout12 $end
$var wire 1 D cout11 $end
$var wire 1 E cout10 $end
$var wire 1 F cout1 $end
$var wire 1 G cout0 $end
$var wire 1 " cout $end
$scope module cir0 $end
$var wire 1 % cin $end
$var wire 1 H in0 $end
$var wire 1 I w3 $end
$var wire 1 J w2 $end
$var wire 1 K w1 $end
$var wire 1 L sum $end
$var wire 1 8 in1 $end
$var wire 1 G cout $end
$scope module cir1 $end
$var wire 1 H in0 $end
$var wire 1 8 in1 $end
$var reg 1 K out $end
$upscope $end
$scope module cir2 $end
$var wire 1 K in0 $end
$var wire 1 % in1 $end
$var reg 1 L out $end
$upscope $end
$scope module cir3 $end
$var wire 1 H in0 $end
$var wire 1 8 in1 $end
$var reg 1 J out $end
$upscope $end
$scope module cir4 $end
$var wire 1 K in0 $end
$var wire 1 % in1 $end
$var reg 1 I out $end
$upscope $end
$scope module cir5 $end
$var wire 1 J in0 $end
$var wire 1 I in1 $end
$var reg 1 G out $end
$upscope $end
$upscope $end
$scope module cir1 $end
$var wire 1 G cin $end
$var wire 1 M in0 $end
$var wire 1 N w3 $end
$var wire 1 O w2 $end
$var wire 1 P w1 $end
$var wire 1 Q sum $end
$var wire 1 7 in1 $end
$var wire 1 F cout $end
$scope module cir1 $end
$var wire 1 M in0 $end
$var wire 1 7 in1 $end
$var reg 1 P out $end
$upscope $end
$scope module cir2 $end
$var wire 1 P in0 $end
$var wire 1 G in1 $end
$var reg 1 Q out $end
$upscope $end
$scope module cir3 $end
$var wire 1 M in0 $end
$var wire 1 7 in1 $end
$var reg 1 O out $end
$upscope $end
$scope module cir4 $end
$var wire 1 P in0 $end
$var wire 1 G in1 $end
$var reg 1 N out $end
$upscope $end
$scope module cir5 $end
$var wire 1 O in0 $end
$var wire 1 N in1 $end
$var reg 1 F out $end
$upscope $end
$upscope $end
$scope module cir10 $end
$var wire 1 R in0 $end
$var wire 1 S w3 $end
$var wire 1 T w2 $end
$var wire 1 U w1 $end
$var wire 1 V sum $end
$var wire 1 6 in1 $end
$var wire 1 E cout $end
$var wire 1 9 cin $end
$scope module cir1 $end
$var wire 1 R in0 $end
$var wire 1 6 in1 $end
$var reg 1 U out $end
$upscope $end
$scope module cir2 $end
$var wire 1 U in0 $end
$var wire 1 9 in1 $end
$var reg 1 V out $end
$upscope $end
$scope module cir3 $end
$var wire 1 R in0 $end
$var wire 1 6 in1 $end
$var reg 1 T out $end
$upscope $end
$scope module cir4 $end
$var wire 1 U in0 $end
$var wire 1 9 in1 $end
$var reg 1 S out $end
$upscope $end
$scope module cir5 $end
$var wire 1 T in0 $end
$var wire 1 S in1 $end
$var reg 1 E out $end
$upscope $end
$upscope $end
$scope module cir11 $end
$var wire 1 E cin $end
$var wire 1 W in0 $end
$var wire 1 X w3 $end
$var wire 1 Y w2 $end
$var wire 1 Z w1 $end
$var wire 1 [ sum $end
$var wire 1 5 in1 $end
$var wire 1 D cout $end
$scope module cir1 $end
$var wire 1 W in0 $end
$var wire 1 5 in1 $end
$var reg 1 Z out $end
$upscope $end
$scope module cir2 $end
$var wire 1 Z in0 $end
$var wire 1 E in1 $end
$var reg 1 [ out $end
$upscope $end
$scope module cir3 $end
$var wire 1 W in0 $end
$var wire 1 5 in1 $end
$var reg 1 Y out $end
$upscope $end
$scope module cir4 $end
$var wire 1 Z in0 $end
$var wire 1 E in1 $end
$var reg 1 X out $end
$upscope $end
$scope module cir5 $end
$var wire 1 Y in0 $end
$var wire 1 X in1 $end
$var reg 1 D out $end
$upscope $end
$upscope $end
$scope module cir12 $end
$var wire 1 D cin $end
$var wire 1 \ in0 $end
$var wire 1 ] w3 $end
$var wire 1 ^ w2 $end
$var wire 1 _ w1 $end
$var wire 1 ` sum $end
$var wire 1 4 in1 $end
$var wire 1 C cout $end
$scope module cir1 $end
$var wire 1 \ in0 $end
$var wire 1 4 in1 $end
$var reg 1 _ out $end
$upscope $end
$scope module cir2 $end
$var wire 1 _ in0 $end
$var wire 1 D in1 $end
$var reg 1 ` out $end
$upscope $end
$scope module cir3 $end
$var wire 1 \ in0 $end
$var wire 1 4 in1 $end
$var reg 1 ^ out $end
$upscope $end
$scope module cir4 $end
$var wire 1 _ in0 $end
$var wire 1 D in1 $end
$var reg 1 ] out $end
$upscope $end
$scope module cir5 $end
$var wire 1 ^ in0 $end
$var wire 1 ] in1 $end
$var reg 1 C out $end
$upscope $end
$upscope $end
$scope module cir13 $end
$var wire 1 C cin $end
$var wire 1 a in0 $end
$var wire 1 b w3 $end
$var wire 1 c w2 $end
$var wire 1 d w1 $end
$var wire 1 e sum $end
$var wire 1 3 in1 $end
$var wire 1 B cout $end
$scope module cir1 $end
$var wire 1 a in0 $end
$var wire 1 3 in1 $end
$var reg 1 d out $end
$upscope $end
$scope module cir2 $end
$var wire 1 d in0 $end
$var wire 1 C in1 $end
$var reg 1 e out $end
$upscope $end
$scope module cir3 $end
$var wire 1 a in0 $end
$var wire 1 3 in1 $end
$var reg 1 c out $end
$upscope $end
$scope module cir4 $end
$var wire 1 d in0 $end
$var wire 1 C in1 $end
$var reg 1 b out $end
$upscope $end
$scope module cir5 $end
$var wire 1 c in0 $end
$var wire 1 b in1 $end
$var reg 1 B out $end
$upscope $end
$upscope $end
$scope module cir14 $end
$var wire 1 B cin $end
$var wire 1 f in0 $end
$var wire 1 g w3 $end
$var wire 1 h w2 $end
$var wire 1 i w1 $end
$var wire 1 j sum $end
$var wire 1 2 in1 $end
$var wire 1 A cout $end
$scope module cir1 $end
$var wire 1 f in0 $end
$var wire 1 2 in1 $end
$var reg 1 i out $end
$upscope $end
$scope module cir2 $end
$var wire 1 i in0 $end
$var wire 1 B in1 $end
$var reg 1 j out $end
$upscope $end
$scope module cir3 $end
$var wire 1 f in0 $end
$var wire 1 2 in1 $end
$var reg 1 h out $end
$upscope $end
$scope module cir4 $end
$var wire 1 i in0 $end
$var wire 1 B in1 $end
$var reg 1 g out $end
$upscope $end
$scope module cir5 $end
$var wire 1 h in0 $end
$var wire 1 g in1 $end
$var reg 1 A out $end
$upscope $end
$upscope $end
$scope module cir15 $end
$var wire 1 A cin $end
$var wire 1 k in0 $end
$var wire 1 l w3 $end
$var wire 1 m w2 $end
$var wire 1 n w1 $end
$var wire 1 o sum $end
$var wire 1 1 in1 $end
$var wire 1 " cout $end
$scope module cir1 $end
$var wire 1 k in0 $end
$var wire 1 1 in1 $end
$var reg 1 n out $end
$upscope $end
$scope module cir2 $end
$var wire 1 n in0 $end
$var wire 1 A in1 $end
$var reg 1 o out $end
$upscope $end
$scope module cir3 $end
$var wire 1 k in0 $end
$var wire 1 1 in1 $end
$var reg 1 m out $end
$upscope $end
$scope module cir4 $end
$var wire 1 n in0 $end
$var wire 1 A in1 $end
$var reg 1 l out $end
$upscope $end
$scope module cir5 $end
$var wire 1 m in0 $end
$var wire 1 l in1 $end
$var reg 1 " out $end
$upscope $end
$upscope $end
$scope module cir2 $end
$var wire 1 F cin $end
$var wire 1 p in0 $end
$var wire 1 q w3 $end
$var wire 1 r w2 $end
$var wire 1 s w1 $end
$var wire 1 t sum $end
$var wire 1 0 in1 $end
$var wire 1 @ cout $end
$scope module cir1 $end
$var wire 1 p in0 $end
$var wire 1 0 in1 $end
$var reg 1 s out $end
$upscope $end
$scope module cir2 $end
$var wire 1 s in0 $end
$var wire 1 F in1 $end
$var reg 1 t out $end
$upscope $end
$scope module cir3 $end
$var wire 1 p in0 $end
$var wire 1 0 in1 $end
$var reg 1 r out $end
$upscope $end
$scope module cir4 $end
$var wire 1 s in0 $end
$var wire 1 F in1 $end
$var reg 1 q out $end
$upscope $end
$scope module cir5 $end
$var wire 1 r in0 $end
$var wire 1 q in1 $end
$var reg 1 @ out $end
$upscope $end
$upscope $end
$scope module cir3 $end
$var wire 1 @ cin $end
$var wire 1 u in0 $end
$var wire 1 v w3 $end
$var wire 1 w w2 $end
$var wire 1 x w1 $end
$var wire 1 y sum $end
$var wire 1 / in1 $end
$var wire 1 ? cout $end
$scope module cir1 $end
$var wire 1 u in0 $end
$var wire 1 / in1 $end
$var reg 1 x out $end
$upscope $end
$scope module cir2 $end
$var wire 1 x in0 $end
$var wire 1 @ in1 $end
$var reg 1 y out $end
$upscope $end
$scope module cir3 $end
$var wire 1 u in0 $end
$var wire 1 / in1 $end
$var reg 1 w out $end
$upscope $end
$scope module cir4 $end
$var wire 1 x in0 $end
$var wire 1 @ in1 $end
$var reg 1 v out $end
$upscope $end
$scope module cir5 $end
$var wire 1 w in0 $end
$var wire 1 v in1 $end
$var reg 1 ? out $end
$upscope $end
$upscope $end
$scope module cir4 $end
$var wire 1 ? cin $end
$var wire 1 z in0 $end
$var wire 1 { w3 $end
$var wire 1 | w2 $end
$var wire 1 } w1 $end
$var wire 1 ~ sum $end
$var wire 1 . in1 $end
$var wire 1 > cout $end
$scope module cir1 $end
$var wire 1 z in0 $end
$var wire 1 . in1 $end
$var reg 1 } out $end
$upscope $end
$scope module cir2 $end
$var wire 1 } in0 $end
$var wire 1 ? in1 $end
$var reg 1 ~ out $end
$upscope $end
$scope module cir3 $end
$var wire 1 z in0 $end
$var wire 1 . in1 $end
$var reg 1 | out $end
$upscope $end
$scope module cir4 $end
$var wire 1 } in0 $end
$var wire 1 ? in1 $end
$var reg 1 { out $end
$upscope $end
$scope module cir5 $end
$var wire 1 | in0 $end
$var wire 1 { in1 $end
$var reg 1 > out $end
$upscope $end
$upscope $end
$scope module cir5 $end
$var wire 1 > cin $end
$var wire 1 !" in0 $end
$var wire 1 "" w3 $end
$var wire 1 #" w2 $end
$var wire 1 $" w1 $end
$var wire 1 %" sum $end
$var wire 1 - in1 $end
$var wire 1 = cout $end
$scope module cir1 $end
$var wire 1 !" in0 $end
$var wire 1 - in1 $end
$var reg 1 $" out $end
$upscope $end
$scope module cir2 $end
$var wire 1 $" in0 $end
$var wire 1 > in1 $end
$var reg 1 %" out $end
$upscope $end
$scope module cir3 $end
$var wire 1 !" in0 $end
$var wire 1 - in1 $end
$var reg 1 #" out $end
$upscope $end
$scope module cir4 $end
$var wire 1 $" in0 $end
$var wire 1 > in1 $end
$var reg 1 "" out $end
$upscope $end
$scope module cir5 $end
$var wire 1 #" in0 $end
$var wire 1 "" in1 $end
$var reg 1 = out $end
$upscope $end
$upscope $end
$scope module cir6 $end
$var wire 1 = cin $end
$var wire 1 &" in0 $end
$var wire 1 '" w3 $end
$var wire 1 (" w2 $end
$var wire 1 )" w1 $end
$var wire 1 *" sum $end
$var wire 1 , in1 $end
$var wire 1 < cout $end
$scope module cir1 $end
$var wire 1 &" in0 $end
$var wire 1 , in1 $end
$var reg 1 )" out $end
$upscope $end
$scope module cir2 $end
$var wire 1 )" in0 $end
$var wire 1 = in1 $end
$var reg 1 *" out $end
$upscope $end
$scope module cir3 $end
$var wire 1 &" in0 $end
$var wire 1 , in1 $end
$var reg 1 (" out $end
$upscope $end
$scope module cir4 $end
$var wire 1 )" in0 $end
$var wire 1 = in1 $end
$var reg 1 '" out $end
$upscope $end
$scope module cir5 $end
$var wire 1 (" in0 $end
$var wire 1 '" in1 $end
$var reg 1 < out $end
$upscope $end
$upscope $end
$scope module cir7 $end
$var wire 1 < cin $end
$var wire 1 +" in0 $end
$var wire 1 ," w3 $end
$var wire 1 -" w2 $end
$var wire 1 ." w1 $end
$var wire 1 /" sum $end
$var wire 1 + in1 $end
$var wire 1 ; cout $end
$scope module cir1 $end
$var wire 1 +" in0 $end
$var wire 1 + in1 $end
$var reg 1 ." out $end
$upscope $end
$scope module cir2 $end
$var wire 1 ." in0 $end
$var wire 1 < in1 $end
$var reg 1 /" out $end
$upscope $end
$scope module cir3 $end
$var wire 1 +" in0 $end
$var wire 1 + in1 $end
$var reg 1 -" out $end
$upscope $end
$scope module cir4 $end
$var wire 1 ." in0 $end
$var wire 1 < in1 $end
$var reg 1 ," out $end
$upscope $end
$scope module cir5 $end
$var wire 1 -" in0 $end
$var wire 1 ," in1 $end
$var reg 1 ; out $end
$upscope $end
$upscope $end
$scope module cir8 $end
$var wire 1 ; cin $end
$var wire 1 0" in0 $end
$var wire 1 1" w3 $end
$var wire 1 2" w2 $end
$var wire 1 3" w1 $end
$var wire 1 4" sum $end
$var wire 1 * in1 $end
$var wire 1 : cout $end
$scope module cir1 $end
$var wire 1 0" in0 $end
$var wire 1 * in1 $end
$var reg 1 3" out $end
$upscope $end
$scope module cir2 $end
$var wire 1 3" in0 $end
$var wire 1 ; in1 $end
$var reg 1 4" out $end
$upscope $end
$scope module cir3 $end
$var wire 1 0" in0 $end
$var wire 1 * in1 $end
$var reg 1 2" out $end
$upscope $end
$scope module cir4 $end
$var wire 1 3" in0 $end
$var wire 1 ; in1 $end
$var reg 1 1" out $end
$upscope $end
$scope module cir5 $end
$var wire 1 2" in0 $end
$var wire 1 1" in1 $end
$var reg 1 : out $end
$upscope $end
$upscope $end
$scope module cir9 $end
$var wire 1 : cin $end
$var wire 1 5" in0 $end
$var wire 1 6" w3 $end
$var wire 1 7" w2 $end
$var wire 1 8" w1 $end
$var wire 1 9" sum $end
$var wire 1 ) in1 $end
$var wire 1 9 cout $end
$scope module cir1 $end
$var wire 1 5" in0 $end
$var wire 1 ) in1 $end
$var reg 1 8" out $end
$upscope $end
$scope module cir2 $end
$var wire 1 8" in0 $end
$var wire 1 : in1 $end
$var reg 1 9" out $end
$upscope $end
$scope module cir3 $end
$var wire 1 5" in0 $end
$var wire 1 ) in1 $end
$var reg 1 7" out $end
$upscope $end
$scope module cir4 $end
$var wire 1 8" in0 $end
$var wire 1 : in1 $end
$var reg 1 6" out $end
$upscope $end
$scope module cir5 $end
$var wire 1 7" in0 $end
$var wire 1 6" in1 $end
$var reg 1 9 out $end
$upscope $end
$upscope $end
$scope module xor0 $end
$var wire 1 :" in0 $end
$var wire 1 % in1 $end
$var reg 1 8 out $end
$upscope $end
$scope module xor1 $end
$var wire 1 ;" in0 $end
$var wire 1 % in1 $end
$var reg 1 7 out $end
$upscope $end
$scope module xor10 $end
$var wire 1 <" in0 $end
$var wire 1 % in1 $end
$var reg 1 6 out $end
$upscope $end
$scope module xor11 $end
$var wire 1 =" in0 $end
$var wire 1 % in1 $end
$var reg 1 5 out $end
$upscope $end
$scope module xor12 $end
$var wire 1 >" in0 $end
$var wire 1 % in1 $end
$var reg 1 4 out $end
$upscope $end
$scope module xor13 $end
$var wire 1 ?" in0 $end
$var wire 1 % in1 $end
$var reg 1 3 out $end
$upscope $end
$scope module xor14 $end
$var wire 1 @" in0 $end
$var wire 1 % in1 $end
$var reg 1 2 out $end
$upscope $end
$scope module xor15 $end
$var wire 1 A" in0 $end
$var wire 1 % in1 $end
$var reg 1 1 out $end
$upscope $end
$scope module xor2 $end
$var wire 1 B" in0 $end
$var wire 1 % in1 $end
$var reg 1 0 out $end
$upscope $end
$scope module xor3 $end
$var wire 1 C" in0 $end
$var wire 1 % in1 $end
$var reg 1 / out $end
$upscope $end
$scope module xor4 $end
$var wire 1 D" in0 $end
$var wire 1 % in1 $end
$var reg 1 . out $end
$upscope $end
$scope module xor5 $end
$var wire 1 E" in0 $end
$var wire 1 % in1 $end
$var reg 1 - out $end
$upscope $end
$scope module xor6 $end
$var wire 1 F" in0 $end
$var wire 1 % in1 $end
$var reg 1 , out $end
$upscope $end
$scope module xor7 $end
$var wire 1 G" in0 $end
$var wire 1 % in1 $end
$var reg 1 + out $end
$upscope $end
$scope module xor8 $end
$var wire 1 H" in0 $end
$var wire 1 % in1 $end
$var reg 1 * out $end
$upscope $end
$scope module xor9 $end
$var wire 1 I" in0 $end
$var wire 1 % in1 $end
$var reg 1 ) out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
1:"
09"
08"
07"
06"
05"
14"
13"
02"
01"
10"
0/"
0."
0-"
0,"
0+"
1*"
1)"
0("
0'"
1&"
0%"
0$"
0#"
0""
0!"
1~
1}
0|
0{
1z
0y
0x
0w
0v
0u
1t
1s
0r
0q
1p
1o
1n
0m
0l
1k
1j
1i
0h
0g
1f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
1[
1Z
0Y
0X
1W
0V
0U
0T
0S
0R
1Q
0P
0O
0N
0M
0L
0K
1J
0I
1H
1G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
18
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
b1100100101010110 (
b1 '
b1100100101010101 &
0%
b1 $
b1100100101010101 #
0"
b1100100101010110 !
$end
#20
1A
1g
1`
1B
1_
1c
0e
0j
b1001100101010110 !
b1001100101010110 (
1o
14
13
12
0d
1i
0n
1>"
1?"
1@"
1a
0f
0k
b111000000000001 $
b111000000000001 '
b10100101010101 #
b10100101010101 &
#30
1E
1b
1S
1C
1?
1=
1;
19
1F
0`
1]
1v
1""
1,"
16"
1I
1G
0Q
1N
0V
1[
1D
1t
1@
0y
1~
1>
0%"
1*"
1<
0/"
14"
1:
09"
0e
1B
1j
0g
1"
1K
0J
1P
1U
0Z
1Y
0s
1r
1x
0}
1|
1$"
0)"
1("
1."
03"
12"
18"
1d
0c
0i
1h
1m
b1100100101010100 !
b1100100101010100 (
0L
08
17
16
15
11
10
1/
1.
1-
1,
1+
1*
1)
0>"
0?"
0@"
0a
1f
1k
1%
b1 $
b1 '
b1100100101010101 #
b1100100101010101 &
#40
